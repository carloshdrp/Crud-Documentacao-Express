// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String
  googleId String  @unique @map(name: "google_id")
  avatar   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post    Post[] // 1 -> n
  //Post Post? // 1->1
  Article Article[]

  @@map(name: "user")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Article   Article[]

  @@map("category")
}

model Article {
  id    Int    @id @default(autoincrement())
  title String @unique
  file  String @unique

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map(name: "category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map(name: "user_id")

  @@map("article")
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String @db.VarChar(255) // isso ai aumenta o tamanho padrÃ£o da string

  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // author User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map(name: "user_id") // 1 -> n
  // userId Int?  @map(name: "user_id") @unique  para 1 -> 1

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "post")
}
